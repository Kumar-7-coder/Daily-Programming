class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

def isValidBST(root):
    def helper(node, lower=float('-inf'), upper=float('inf')):
        if not node:
            return True
        val = node.val
        if val <= lower or val >= upper:
            return False
        if not helper(node.right, val, upper):
            return False
        if not helper(node.left, lower, val):
            return False
        return True
    return helper(root)

def build_tree(values):
    if not values:
        return None
    nodes = [TreeNode(val) if val is not None else None for val in values]
    kid_idx = 1
    for idx in range(len(nodes)):
        node = nodes[idx]
        if node:
            if kid_idx < len(nodes):
                node.left = nodes[kid_idx]
                kid_idx += 1
            if kid_idx < len(nodes):
                node.right = nodes[kid_idx]
                kid_idx += 1
    return nodes[0]

test_cases = [
    ([2, 1, 3], True),
    ([5, 1, 4, None, None, 3, 6], False),
    ([10, 5, 15, None, None, 6, 20], False)
]

for values, expected in test_cases:
    root = build_tree(values)
    result = isValidBST(root)
    print(result)
