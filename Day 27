from collections import deque, defaultdict

def shortest_path(V, edges, start, end):
    graph = defaultdict(list)
    for u, v in edges:
        graph[u].append(v)
        graph[v].append(u)

    queue = deque([(start, 0)])
    visited = set()
    visited.add(start)

    while queue:
        node, distance = queue.popleft()
        if node == end:
            return distance
        for neighbor in graph[node]:
            if neighbor not in visited:
                visited.add(neighbor)
                queue.append((neighbor, distance + 1))
    return -1

print(shortest_path(5, [[0, 1], [0, 2], [1, 3], [2, 3], [3, 4]], 0, 4))
print(shortest_path(3, [[0, 1], [1, 2]], 0, 2))
print(shortest_path(4, [[0, 1], [1, 2]], 2, 3))
