class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

def isSymmetric(root):
    def isMirror(t1, t2):
        if not t1 and not t2:
            return True
        if not t1 or not t2:
            return False
        return (t1.val == t2.val) and isMirror(t1.left, t2.right) and isMirror(t1.right, t2.left)
    return isMirror(root.left, root.right) if root else True

def build_tree(values):
    if not values:
        return None
    nodes = [TreeNode(val) if val is not None else None for val in values]
    kids = nodes[::-1]
    root = kids.pop()
    for node in nodes:
        if node:
            if kids:
                node.left = kids.pop()
            if kids:
                node.right = kids.pop()
    return root

test_cases = [
    [1, 2, 2, 3, 4, 4, 3],
    [1, 2, 2, None, 3, None, 3],
    [1],
    [],
    [1, 2, 2, 3, None, None, 3]
]

for values in test_cases:
    root = build_tree(values)
    print(isSymmetric(root))
